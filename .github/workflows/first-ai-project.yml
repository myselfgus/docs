name: 🎯 First AI Project Setup

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: 'Name of the AI project'
        required: true
        default: 'my-voither-ai-project'
        type: string
      project_type:
        description: 'Type of AI project'
        required: true
        default: 'medical_assistant'
        type: choice
        options:
        - medical_assistant
        - therapeutic_chatbot
        - diagnostic_tool
        - research_assistant
        - custom
      include_templates:
        description: 'Include project templates'
        required: true
        default: true
        type: boolean

jobs:
  first-ai-project-setup:
    name: 🤖 First AI Project Setup
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml python-frontmatter
          
      - name: 🎯 Create First AI Project
        run: |
          python << 'EOF'
          import os
          import yaml
          from datetime import datetime
          from pathlib import Path
          import json
          import re
          
          def sanitize_project_name(name):
              """Sanitize project name for file/folder use"""
              return re.sub(r'[^a-zA-Z0-9_-]', '_', name.lower())
          
          def create_ai_project():
              """Create a new AI project structure"""
              project_name = "${{ inputs.project_name }}"
              project_type = "${{ inputs.project_type }}"
              include_templates = "${{ inputs.include_templates }}" == "true"
              
              sanitized_name = sanitize_project_name(project_name)
              
              print(f"🎯 Creating First AI Project: {project_name}")
              print(f"📋 Project type: {project_type}")
              print(f"📝 Include templates: {include_templates}")
              print(f"📁 Folder name: {sanitized_name}")
              
              # Create project directory
              project_dir = f"guides/ai_projects/{sanitized_name}"
              os.makedirs(project_dir, exist_ok=True)
              
              # Create main project documentation
              create_project_documentation(project_dir, project_name, project_type)
              
              if include_templates:
                  create_project_templates(project_dir, project_name, project_type)
              
              # Create architecture documentation
              create_architecture_docs(project_dir, project_name, project_type)
              
              # Update project index
              update_project_index(sanitized_name, project_name, project_type)
              
              return project_dir
          
          def create_project_documentation(project_dir, project_name, project_type):
              """Create main project documentation"""
              
              project_descriptions = {
                  "medical_assistant": "AI-powered medical assistance system for healthcare professionals",
                  "therapeutic_chatbot": "Conversational AI for therapeutic and mental health support",
                  "diagnostic_tool": "AI diagnostic tool for medical condition assessment",
                  "research_assistant": "AI research assistant for medical and scientific research",
                  "custom": "Custom AI application tailored to specific requirements"
              }
              
              description = project_descriptions.get(project_type, "Custom AI project")
              
              main_doc = f'''---
          title: "{project_name} - AI Project Documentation"
          description: "{description}"
          version: "1.0"
          last_updated: "{datetime.now().strftime('%Y-%m-%d')}"
          audience: ["developers", "ai_researchers", "medical_professionals"]
          priority: "important"
          reading_time: "15 minutes"
          tags: ["ai_project", "{project_type}", "voither", "implementation"]
          ---
          
          # {project_name} - AI Project Documentation
          
          ## 🎯 Project Overview
          
          **Project Type**: {project_type.replace('_', ' ').title()}
          **Description**: {description}
          **Created**: {datetime.now().strftime('%Y-%m-%d')}
          
          ## 📋 Project Objectives
          
          Define the main objectives and goals of your AI project here:
          
          1. **Primary Objective**: [Describe the main goal]
          2. **Secondary Objectives**: [List additional goals]
          3. **Success Metrics**: [Define how to measure success]
          
          ## 🏗️ Architecture Overview
          
          ### System Components
          
          - **Core AI Engine**: [Describe the main AI component]
          - **Data Processing Pipeline**: [Data handling and preprocessing]
          - **User Interface**: [How users interact with the system]
          - **Integration Layer**: [External system connections]
          
          ### Technology Stack
          
          - **AI/ML Framework**: [e.g., TensorFlow, PyTorch, Transformers]
          - **Programming Language**: Python 3.11+
          - **Backend**: [API framework if applicable]
          - **Frontend**: [UI technology if applicable]
          - **Database**: [Data storage solution]
          
          ## 🚀 Getting Started
          
          ### Prerequisites
          
          - Python 3.11 or higher
          - Required AI/ML libraries (see requirements.txt)
          - [Additional prerequisites specific to project type]
          
          ### Installation
          
          ```bash
          # Clone the repository
          git clone [repository-url]
          cd {project_name.lower().replace(' ', '-')}
          
          # Install dependencies
          pip install -r requirements.txt
          
          # Run initial setup
          python setup.py
          ```
          
          ### Basic Usage
          
          ```python
          # Basic usage example
          from {sanitize_project_name(project_name)} import AIAssistant
          
          # Initialize the AI assistant
          assistant = AIAssistant()
          
          # Example interaction
          response = assistant.process_input("Hello, I need help with...")
          print(response)
          ```
          
          ## 📊 Implementation Phases
          
          ### Phase 1: Foundation (Weeks 1-2)
          - [ ] Set up development environment
          - [ ] Design core architecture
          - [ ] Implement basic data structures
          - [ ] Create initial AI model
          
          ### Phase 2: Core Development (Weeks 3-6)
          - [ ] Develop main AI functionality
          - [ ] Implement data processing pipeline
          - [ ] Create user interface components
          - [ ] Add basic error handling
          
          ### Phase 3: Integration & Testing (Weeks 7-8)
          - [ ] Integrate all components
          - [ ] Comprehensive testing
          - [ ] Performance optimization
          - [ ] Documentation completion
          
          ### Phase 4: Deployment & Refinement (Weeks 9-10)
          - [ ] Deploy to production environment
          - [ ] User acceptance testing
          - [ ] Bug fixes and improvements
          - [ ] Final documentation updates
          
          ## 🔧 Development Guidelines
          
          ### Code Standards
          
          - Follow PEP 8 for Python code style
          - Use type hints for better code documentation
          - Implement comprehensive error handling
          - Write unit tests for all core functions
          
          ### AI/ML Best Practices
          
          - Document model architecture and parameters
          - Implement proper data validation
          - Use version control for model artifacts
          - Monitor model performance and drift
          
          ## 📈 Performance Metrics
          
          ### AI Model Metrics
          - **Accuracy**: [Target accuracy percentage]
          - **Response Time**: [Target response time]
          - **Resource Usage**: [Memory/CPU requirements]
          
          ### User Experience Metrics
          - **User Satisfaction**: [Survey scores]
          - **Task Completion Rate**: [Success percentage]
          - **Error Rate**: [Acceptable error threshold]
          
          ## 🛡️ Security & Privacy
          
          ### Data Protection
          - Implement data encryption for sensitive information
          - Follow HIPAA guidelines (for medical applications)
          - Regular security audits and updates
          
          ### Privacy Considerations
          - User consent for data collection
          - Data anonymization techniques
          - Compliance with relevant regulations
          
          ## 📚 References & Resources
          
          ### VOITHER Ecosystem Integration
          - [VOITHER Architecture Specs](../../voither_architecture_specs/)
          - [MED Framework Documentation](../../docs/core-concepts/med_frameworks.md)
          - [BRRE Engine Specifications](../../voither_architecture_specs/brre_engine/)
          
          ### External Resources
          - [AI/ML Best Practices]
          - [Medical AI Guidelines]
          - [Regulatory Compliance Information]
          
          ## 🤝 Contributing
          
          We welcome contributions to this project! Please see our [Contributing Guidelines](../../CONTRIBUTING.md) for details.
          
          ## 📞 Support
          
          For questions or support:
          - Create an issue in the GitHub repository
          - Contact the development team
          - Check the [VOITHER Documentation](../../docs/)
          
          ---
          
          *This project is part of the VOITHER ecosystem - Virtual Orchestrator of Integrated Therapeutic Holistic Ecosystem Resources*
          '''
              
              with open(f"{project_dir}/README.md", 'w') as f:
                  f.write(main_doc)
              
              print(f"✅ Created {project_dir}/README.md")
          
          def create_project_templates(project_dir, project_name, project_type):
              """Create project templates and starter code"""
              templates_dir = f"{project_dir}/templates"
              os.makedirs(templates_dir, exist_ok=True)
              
              # Create requirements.txt template
              requirements_content = f'''# {project_name} - Requirements
          # AI/ML Core Libraries
          torch>=2.0.0
          transformers>=4.20.0
          numpy>=1.21.0
          pandas>=1.5.0
          scikit-learn>=1.1.0
          
          # Web Framework (if needed)
          fastapi>=0.95.0
          uvicorn>=0.20.0
          
          # Data Processing
          pyyaml>=6.0
          python-frontmatter>=1.0.0
          
          # Utilities
          python-dotenv>=1.0.0
          click>=8.0.0
          
          # Development Tools
          pytest>=7.0.0
          black>=22.0.0
          flake8>=4.0.0
          '''
              
              with open(f"{templates_dir}/requirements.txt", 'w') as f:
                  f.write(requirements_content)
              
              # Create basic Python template
              python_template = f'''#!/usr/bin/env python3
          """
          {project_name} - Main Application Module
          
          This is the main entry point for the {project_name} AI project.
          """
          
          import os
          import logging
          from datetime import datetime
          from typing import Dict, List, Any, Optional
          
          # Configure logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)
          
          class {sanitize_project_name(project_name).title().replace('_', '')}AI:
              """
              Main AI class for {project_name}
              """
              
              def __init__(self, config: Optional[Dict] = None):
                  """Initialize the AI system"""
                  self.config = config or self._load_default_config()
                  self.model = None
                  self.is_initialized = False
                  
                  logger.info(f"Initializing {{self.__class__.__name__}}")
              
              def _load_default_config(self) -> Dict[str, Any]:
                  """Load default configuration"""
                  return {{
                      "model_name": "default",
                      "max_tokens": 512,
                      "temperature": 0.7,
                      "device": "auto"
                  }}
              
              def initialize(self) -> bool:
                  """Initialize the AI model and components"""
                  try:
                      logger.info("Loading AI model...")
                      # TODO: Implement model loading logic
                      
                      logger.info("Setting up data processing pipeline...")
                      # TODO: Implement data processing setup
                      
                      self.is_initialized = True
                      logger.info("AI system initialized successfully")
                      return True
                      
                  except Exception as e:
                      logger.error(f"Failed to initialize AI system: {{e}}")
                      return False
              
              def process_input(self, user_input: str) -> Dict[str, Any]:
                  """Process user input and return AI response"""
                  if not self.is_initialized:
                      return {{"error": "AI system not initialized"}}
                  
                  try:
                      # TODO: Implement input processing logic
                      response = f"AI response to: {{user_input}}"
                      
                      return {{
                          "response": response,
                          "confidence": 0.95,
                          "timestamp": datetime.now().isoformat()
                      }}
                      
                  except Exception as e:
                      logger.error(f"Error processing input: {{e}}")
                      return {{"error": str(e)}}
              
              def get_health_status(self) -> Dict[str, Any]:
                  """Get system health status"""
                  return {{
                      "status": "healthy" if self.is_initialized else "not_ready",
                      "initialized": self.is_initialized,
                      "timestamp": datetime.now().isoformat()
                  }}
          
          def main():
              """Main application entry point"""
              print(f"Starting {{project_name}}...")
              
              # Initialize AI system
              ai_system = {sanitize_project_name(project_name).title().replace('_', '')}AI()
              
              if ai_system.initialize():
                  print("AI system ready!")
                  
                  # Example interaction
                  result = ai_system.process_input("Hello, AI!")
                  print(f"AI Response: {{result}}")
              else:
                  print("Failed to initialize AI system")
          
          if __name__ == "__main__":
              main()
          '''
              
              with open(f"{templates_dir}/main.py", 'w') as f:
                  f.write(python_template)
              
              print(f"✅ Created project templates in {templates_dir}/")
          
          def create_architecture_docs(project_dir, project_name, project_type):
              """Create architecture documentation"""
              arch_doc = f'''---
          title: "{project_name} - Technical Architecture"
          description: "Detailed technical architecture and implementation specifications"
          version: "1.0"
          last_updated: "{datetime.now().strftime('%Y-%m-%d')}"
          audience: ["developers", "architects", "technical_leads"]
          priority: "essential"
          reading_time: "20 minutes"
          tags: ["architecture", "technical_specs", "{project_type}", "ai_design"]
          ---
          
          # {project_name} - Technical Architecture
          
          ## 🏗️ System Architecture Overview
          
          This document provides detailed technical specifications for the {project_name} AI system.
          
          ### High-Level Architecture
          
          ```mermaid
          graph TB
              A[User Interface] --> B[API Gateway]
              B --> C[AI Processing Engine]
              C --> D[Data Pipeline]
              D --> E[Model Storage]
              C --> F[Response Generator]
              F --> B
              B --> A
              
              G[Configuration] --> C
              H[Monitoring] --> C
              I[Logging] --> C
          ```
          
          ## 🔧 Component Specifications
          
          ### AI Processing Engine
          
          **Responsibility**: Core AI logic and model inference
          
          **Key Features**:
          - Multi-model support
          - Configurable inference parameters
          - Real-time processing
          - Error handling and fallbacks
          
          **Implementation**:
          ```python
          class AIProcessingEngine:
              def __init__(self, model_config: Dict):
                  self.models = self._load_models(model_config)
                  self.processor = self._initialize_processor()
              
              def process(self, input_data: Any) -> Dict[str, Any]:
                  # Implementation details
                  pass
          ```
          
          ### Data Pipeline
          
          **Responsibility**: Data preprocessing, validation, and transformation
          
          **Pipeline Stages**:
          1. Input validation
          2. Data cleaning and normalization
          3. Feature extraction
          4. Model-specific preprocessing
          5. Output formatting
          
          **Data Flow**:
          ```mermaid
          graph LR
              A[Raw Input] --> B[Validation]
              B --> C[Cleaning]
              C --> D[Normalization]
              D --> E[Feature Extraction]
              E --> F[Model Input]
          ```
          
          ## 📊 Data Models
          
          ### Input Data Schema
          
          ```python
          from pydantic import BaseModel
          from typing import Optional, List, Dict
          
          class UserInput(BaseModel):
              text: str
              context: Optional[Dict] = None
              metadata: Optional[Dict] = None
              user_id: Optional[str] = None
          
          class ProcessingRequest(BaseModel):
              input_data: UserInput
              processing_options: Optional[Dict] = None
              response_format: str = "json"
          ```
          
          ### Output Data Schema
          
          ```python
          class AIResponse(BaseModel):
              response: str
              confidence: float
              processing_time: float
              metadata: Dict
              timestamp: str
          
          class ProcessingResult(BaseModel):
              success: bool
              result: Optional[AIResponse] = None
              error: Optional[str] = None
              request_id: str
          ```
          
          ## 🚀 Performance Specifications
          
          ### Response Time Requirements
          
          | Operation | Target Time | Maximum Time |
          |-----------|-------------|--------------|
          | Simple Query | < 500ms | < 1s |
          | Complex Analysis | < 2s | < 5s |
          | Batch Processing | < 30s | < 60s |
          
          ### Throughput Requirements
          
          - **Concurrent Users**: Up to 100
          - **Requests per Second**: 50-100 RPS
          - **Daily Processing Volume**: 10,000+ requests
          
          ### Resource Requirements
          
          - **Memory**: 4-8 GB RAM minimum
          - **CPU**: Multi-core processor (4+ cores recommended)
          - **Storage**: 10+ GB for models and data
          - **GPU**: Optional but recommended for ML workloads
          
          ## 🔐 Security Architecture
          
          ### Authentication & Authorization
          
          - API key-based authentication
          - Role-based access control (RBAC)
          - Rate limiting per user/API key
          - Request validation and sanitization
          
          ### Data Protection
          
          - Encryption at rest and in transit
          - PII data handling protocols
          - Audit logging for all operations
          - Compliance with healthcare regulations (if applicable)
          
          ## 📈 Monitoring & Observability
          
          ### Metrics Collection
          
          - Response times and throughput
          - Error rates and types
          - Model performance metrics
          - Resource utilization
          
          ### Logging Strategy
          
          - Structured logging (JSON format)
          - Log levels: DEBUG, INFO, WARN, ERROR
          - Centralized log aggregation
          - Retention policies
          
          ### Health Checks
          
          ```python
          class HealthChecker:
              def check_system_health(self) -> Dict[str, str]:
                  return {{
                      "ai_engine": self._check_ai_engine(),
                      "data_pipeline": self._check_data_pipeline(),
                      "model_status": self._check_models(),
                      "database": self._check_database(),
                      "overall": self._calculate_overall_health()
                  }}
          ```
          
          ## 🔄 Deployment Architecture
          
          ### Environment Configuration
          
          - **Development**: Local development with mock services
          - **Staging**: Pre-production testing environment
          - **Production**: Full-scale deployment with monitoring
          
          ### Deployment Strategy
          
          - Containerized deployment (Docker)
          - Blue-green deployment for zero downtime
          - Automated rollback capabilities
          - Health-check based traffic routing
          
          ## 🛠️ Development Tools & Frameworks
          
          ### Core Technologies
          
          - **Python**: 3.11+ for main application
          - **FastAPI**: Web framework for API development
          - **PyTorch/TensorFlow**: ML framework
          - **Docker**: Containerization
          - **Redis**: Caching and session management
          
          ### Development Tools
          
          - **Testing**: pytest, unittest
          - **Code Quality**: black, flake8, mypy
          - **Documentation**: Sphinx, mkdocs
          - **CI/CD**: GitHub Actions
          
          ## 📋 Integration Points
          
          ### VOITHER Ecosystem Integration
          
          - **MED Framework**: For medical state extraction
          - **BRRE Engine**: For bidirectional reasoning
          - **Knowledge Graph**: For concept relationships
          - **Ontology System**: For terminology consistency
          
          ### External Integrations
          
          - Healthcare information systems
          - Electronic health records (EHR)
          - Medical databases and APIs
          - Third-party AI services (backup/fallback)
          
          ## 🔮 Future Enhancements
          
          ### Planned Features
          
          - Multi-language support
          - Advanced analytics dashboard
          - Machine learning model updates
          - Enhanced security features
          
          ### Scalability Considerations
          
          - Horizontal scaling with load balancers
          - Microservices architecture migration
          - Cloud-native deployment options
          - Edge computing capabilities
          
          ---
          
          *This architecture document is part of the {project_name} project within the VOITHER ecosystem.*
          '''
              
              with open(f"{project_dir}/ARCHITECTURE.md", 'w') as f:
                  f.write(arch_doc)
              
              print(f"✅ Created {project_dir}/ARCHITECTURE.md")
          
          def update_project_index(sanitized_name, project_name, project_type):
              """Update the AI projects index"""
              index_dir = "guides/ai_projects"
              os.makedirs(index_dir, exist_ok=True)
              
              index_content = f'''---
          title: "VOITHER AI Projects Index"
          description: "Comprehensive index of all AI projects in the VOITHER ecosystem"
          version: "1.0"
          last_updated: "{datetime.now().strftime('%Y-%m-%d')}"
          audience: ["developers", "ai_researchers", "project_managers"]
          priority: "important"
          reading_time: "5 minutes"
          tags: ["ai_projects", "index", "overview", "voither"]
          ---
          
          # 🤖 VOITHER AI Projects Index
          
          This directory contains all AI projects developed within the VOITHER ecosystem.
          
          ## 📋 Active Projects
          
          ### {project_name}
          - **Type**: {project_type.replace('_', ' ').title()}
          - **Status**: In Development
          - **Documentation**: [{project_name}]({sanitized_name}/README.md)
          - **Architecture**: [{project_name} Architecture]({sanitized_name}/ARCHITECTURE.md)
          - **Created**: {datetime.now().strftime('%Y-%m-%d')}
          
          ## 🚀 Getting Started with AI Projects
          
          1. **Choose a Project Type**: Select from medical assistant, therapeutic chatbot, diagnostic tool, or custom
          2. **Use the Quick Start Workflow**: Run the "First AI Project Setup" GitHub Action
          3. **Follow the Template**: Each project includes comprehensive documentation and starter code
          4. **Integrate with VOITHER**: Leverage the VOITHER ecosystem components
          
          ## 📚 Project Categories
          
          ### Medical AI Projects
          - Medical assistance systems
          - Diagnostic tools
          - Clinical decision support
          - Medical research assistants
          
          ### Therapeutic AI Projects
          - Mental health chatbots
          - Therapy session assistants
          - Patient monitoring systems
          - Wellness tracking tools
          
          ### Research AI Projects
          - Scientific literature analysis
          - Data mining tools
          - Hypothesis generation systems
          - Knowledge graph builders
          
          ## 🛠️ Project Templates
          
          Each AI project includes:
          - **README.md**: Project overview and getting started guide
          - **ARCHITECTURE.md**: Technical architecture documentation
          - **templates/**: Starter code and configuration files
          - **requirements.txt**: Python dependencies
          - **main.py**: Basic implementation template
          
          ## 🔗 VOITHER Integration
          
          All projects are designed to integrate with:
          - [MED Framework](../docs/core-concepts/med_frameworks.md)
          - [BRRE Engine](../voither_architecture_specs/brre_engine/)
          - [VOITHER Knowledge Graph](../docs/VOITHER_Knowledge_Graph_Updated.md)
          - [Automation Workflows](../.workflows/)
          
          ## 📞 Support
          
          For questions about AI projects:
          - Check the project-specific documentation
          - Review the [VOITHER Architecture Specs](../voither_architecture_specs/)
          - Create an issue in the GitHub repository
          - Contact the development team
          
          ---
          
          *This index is automatically updated when new AI projects are created.*
          '''
              
              with open(f"{index_dir}/README.md", 'w') as f:
                  f.write(index_content)
              
              print(f"✅ Updated {index_dir}/README.md")
          
          def generate_project_report():
              """Generate project creation report"""
              project_name = "${{ inputs.project_name }}"
              project_type = "${{ inputs.project_type }}"
              include_templates = "${{ inputs.include_templates }}" == "true"
              sanitized_name = sanitize_project_name(project_name)
              
              report = {
                  "creation_timestamp": datetime.now().isoformat(),
                  "project_name": project_name,
                  "sanitized_name": sanitized_name,
                  "project_type": project_type,
                  "include_templates": include_templates,
                  "files_created": [
                      f"guides/ai_projects/{sanitized_name}/README.md",
                      f"guides/ai_projects/{sanitized_name}/ARCHITECTURE.md",
                      "guides/ai_projects/README.md"
                  ],
                  "next_steps": [
                      f"Review the created project documentation in guides/ai_projects/{sanitized_name}/",
                      "Customize the project architecture and requirements",
                      "Start implementing the AI functionality",
                      "Integrate with VOITHER ecosystem components"
                  ]
              }
              
              if include_templates:
                  report["files_created"].extend([
                      f"guides/ai_projects/{sanitized_name}/templates/requirements.txt",
                      f"guides/ai_projects/{sanitized_name}/templates/main.py"
                  ])
              
              with open('project_creation_report.json', 'w') as f:
                  json.dump(report, f, indent=2)
              
              print(f"\n🎉 AI Project '{project_name}' created successfully!")
              print(f"📁 Project directory: guides/ai_projects/{sanitized_name}/")
              print(f"📝 Files created: {len(report['files_created'])}")
              
              return report
          
          # Main execution
          if __name__ == "__main__":
              print("🎯 Starting First AI Project Setup...")
              
              project_dir = create_ai_project()
              report = generate_project_report()
              
              print(f"\n✅ Project setup complete!")
              print(f"📖 Next: Review the documentation in {project_dir}/")
          EOF
          
      - name: 📋 Upload Project Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: project-creation-report
          path: project_creation_report.json
          
      - name: 💾 Commit Created Project
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (First AI Project)"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add guides/ai_projects/
            
            git commit -m "🎯 First AI Project: Created '${{ inputs.project_name }}'
            
            Project Details:
            - Name: ${{ inputs.project_name }}
            - Type: ${{ inputs.project_type }}
            - Templates: ${{ inputs.include_templates }}
            
            Created comprehensive project structure with:
            - Project documentation and getting started guide
            - Technical architecture specifications
            - Code templates and starter files
            - Integration with VOITHER ecosystem
            - Updated AI projects index
            
            This project is ready for development and includes all necessary documentation and templates to get started quickly."
            
            echo "✅ Committed new AI project files"
          else
            echo "ℹ️ No new files to commit"
          fi