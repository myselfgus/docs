name: 🚀 VOITHER Quick Start Setup

on:
  workflow_dispatch:
    inputs:
      setup_type:
        description: 'Type of setup to perform'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - documentation_only
        - development_only
      include_examples:
        description: 'Include example files'
        required: true
        default: true
        type: boolean

jobs:
  voither-quick-start:
    name: ⚡ VOITHER Quick Start Setup
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml python-frontmatter
          
      - name: 🚀 Run VOITHER Quick Start
        run: |
          python << 'EOF'
          import os
          import yaml
          from datetime import datetime
          from pathlib import Path
          import json
          
          def create_quick_start_guide():
              """Create a comprehensive quick start guide"""
              setup_type = "${{ inputs.setup_type }}"
              include_examples = "${{ inputs.include_examples }}" == "true"
              
              print(f"🚀 Creating VOITHER Quick Start Setup")
              print(f"📋 Setup type: {setup_type}")
              print(f"📝 Include examples: {include_examples}")
              
              # Create quick start documentation
              quick_start_content = f'''---
          title: "VOITHER Quick Start Guide"
          description: "Complete setup guide for VOITHER documentation system"
          version: "1.0"
          last_updated: "{datetime.now().strftime('%Y-%m-%d')}"
          audience: ["new_users", "developers", "contributors"]
          priority: "essential"
          reading_time: "10 minutes"
          tags: ["quick-start", "setup", "getting-started", "voither"]
          ---
          
          # 🚀 VOITHER Quick Start Guide
          
          Welcome to the VOITHER documentation ecosystem! This guide will help you get started quickly.
          
          ## 🎯 What is VOITHER?
          
          VOITHER (Virtual Orchestrator of Integrated Therapeutic Holistic Ecosystem Resources) is a comprehensive AI ecosystem designed for therapeutic and medical applications.
          
          ## 📋 Quick Setup Checklist
          
          ### ✅ Prerequisites
          - [ ] Git installed and configured
          - [ ] GitHub account with repository access
          - [ ] Python 3.11+ installed
          - [ ] Text editor or IDE of choice
          
          ### ⚡ Quick Start Steps
          
          1. **Clone the Repository**
             ```bash
             git clone https://github.com/myselfgus/docs.git
             cd docs
             ```
          
          2. **Install Dependencies**
             ```bash
             pip install -r requirements.txt
             ```
          
          3. **Explore the Documentation Structure**
             - `docs/` - Core documentation files
             - `guides/` - User guides and tutorials
             - `voither_architecture_specs/` - Technical specifications
             - `.workflows/` - Automation documentation
          
          4. **Make Your First Contribution**
             - Create a new branch: `git checkout -b feature/your-feature`
             - Add or edit documentation
             - Commit changes: `git commit -m "Add: your changes"`
             - Push and create a pull request
          
          ## 📚 Key Documentation Files
          
          ### Essential Reading
          - [`README.md`](../README.md) - Project overview
          - [`docs/GETTING_STARTED.md`](docs/GETTING_STARTED.md) - Detailed getting started guide
          - [`docs/VOITHER_Knowledge_Graph_Updated.md`](docs/VOITHER_Knowledge_Graph_Updated.md) - Knowledge graph
          - [`docs/DOCUMENTATION_INDEX.md`](docs/DOCUMENTATION_INDEX.md) - Complete file index
          
          ### For Developers
          - [`CONTRIBUTING.md`](CONTRIBUTING.md) - Contribution guidelines
          - [`.workflows/README.md`](.workflows/README.md) - Automation workflows
          - [`voither_architecture_specs/`](voither_architecture_specs/) - Technical specifications
          
          ## 🤖 Automation Features
          
          The repository includes automated workflows that:
          - ✅ Validate documentation on every commit
          - ✅ Auto-update knowledge graphs
          - ✅ Check link integrity
          - ✅ Enforce documentation standards
          - ✅ Generate quality reports
          
          ## 🎯 Next Steps
          
          1. **Read the Documentation**: Start with the files listed above
          2. **Explore the Structure**: Familiarize yourself with the organization
          3. **Try the Workflows**: Make a small change and see automation in action
          4. **Join the Community**: Contribute improvements and feedback
          
          ## 🆘 Getting Help
          
          - 📖 Check the [Documentation Index](docs/DOCUMENTATION_INDEX.md)
          - 🔍 Search existing issues on GitHub
          - 💬 Create a new issue for questions or problems
          - 📧 Contact the maintainers
          
          ## 🔧 Troubleshooting
          
          ### Common Issues
          
          **Workflow Failures**
          - Check that all required files have proper frontmatter
          - Ensure internal links are valid
          - Verify Python dependencies are installed
          
          **Documentation Standards**
          - All `.md` files need YAML frontmatter
          - Use relative paths for internal links
          - Follow the established folder structure
          
          **Quality Issues**
          - Run `make validate` to check documentation
          - Use the AI content verification workflow
          - Review the quality metrics in reports
          
          ---
          
          *Generated by VOITHER Quick Start Setup on {datetime.now().strftime('%Y-%m-%d %H:%M')}*
          '''
              
              # Ensure docs directory exists
              os.makedirs('docs', exist_ok=True)
              
              # Write quick start guide
              with open('docs/QUICK_START.md', 'w') as f:
                  f.write(quick_start_content)
              
              print("✅ Created docs/QUICK_START.md")
              
              # Create example configuration if requested
              if include_examples:
                  create_example_files(setup_type)
              
              # Create development setup if requested
              if setup_type in ['full', 'development_only']:
                  create_development_setup()
              
              return True
          
          def create_example_files(setup_type):
              """Create example files for different setup types"""
              print("📝 Creating example files...")
              
              # Create example documentation file
              example_doc = f'''---
          title: "Example Documentation File"
          description: "Template showing proper documentation structure"
          version: "1.0"
          last_updated: "{datetime.now().strftime('%Y-%m-%d')}"
          audience: ["developers", "contributors"]
          priority: "important"
          reading_time: "3 minutes"
          tags: ["example", "template", "documentation"]
          ---
          
          # Example Documentation File
          
          This is an example of how to structure documentation in the VOITHER ecosystem.
          
          ## Structure Guidelines
          
          1. **Always include YAML frontmatter** with all required fields
          2. **Use clear, descriptive headings** for organization
          3. **Include practical examples** where appropriate
          4. **Cross-reference related documents** using relative links
          
          ## Example Content
          
          This section would contain the actual documentation content.
          
          ### Code Examples
          
          ```python
          # Example Python code
          def example_function():
              return "This is an example"
          ```
          
          ### References
          
          - [Main Documentation Index](DOCUMENTATION_INDEX.md)
          - [VOITHER Knowledge Graph](VOITHER_Knowledge_Graph_Updated.md)
          
          ---
          
          *This is an example file created by the Quick Start setup.*
          '''
              
              os.makedirs('docs/examples', exist_ok=True)
              with open('docs/examples/EXAMPLE_DOCUMENTATION.md', 'w') as f:
                  f.write(example_doc)
              
              print("✅ Created docs/examples/EXAMPLE_DOCUMENTATION.md")
          
          def create_development_setup():
              """Create development environment setup"""
              print("🔧 Setting up development environment...")
              
              # Create .gitignore additions for development
              gitignore_additions = '''
          # VOITHER Development
          .pytest_cache/
          .coverage
          __pycache__/
          *.pyc
          .env
          .venv/
          temp/
          .DS_Store
          '''
              
              # Check if .gitignore exists and append if needed
              gitignore_path = '.gitignore'
              if os.path.exists(gitignore_path):
                  with open(gitignore_path, 'r') as f:
                      current_content = f.read()
                  
                  if 'VOITHER Development' not in current_content:
                      with open(gitignore_path, 'a') as f:
                          f.write(gitignore_additions)
                      print("✅ Updated .gitignore with development entries")
              
              # Create development requirements if not exists
              dev_requirements = '''# VOITHER Development Dependencies
          pytest>=7.0.0
          black>=22.0.0
          flake8>=4.0.0
          pre-commit>=2.17.0
          '''
              
              if not os.path.exists('requirements-dev.txt'):
                  with open('requirements-dev.txt', 'w') as f:
                      f.write(dev_requirements)
                  print("✅ Created requirements-dev.txt")
          
          def generate_setup_report():
              """Generate a setup completion report"""
              report = {
                  "setup_timestamp": datetime.now().isoformat(),
                  "setup_type": "${{ inputs.setup_type }}",
                  "include_examples": "${{ inputs.include_examples }}" == "true",
                  "files_created": [],
                  "next_steps": [
                      "Review the created QUICK_START.md file",
                      "Explore the documentation structure",
                      "Try making a test commit to see automation in action",
                      "Read the CONTRIBUTING.md guidelines"
                  ]
              }
              
              # List created files
              created_files = []
              if os.path.exists('docs/QUICK_START.md'):
                  created_files.append('docs/QUICK_START.md')
              if os.path.exists('docs/examples/EXAMPLE_DOCUMENTATION.md'):
                  created_files.append('docs/examples/EXAMPLE_DOCUMENTATION.md')
              if os.path.exists('requirements-dev.txt'):
                  created_files.append('requirements-dev.txt')
              
              report["files_created"] = created_files
              
              with open('setup_report.json', 'w') as f:
                  json.dump(report, f, indent=2)
              
              print(f"\n📊 Setup Complete! Created {len(created_files)} files:")
              for file in created_files:
                  print(f"  ✅ {file}")
              
              return report
          
          # Main execution
          if __name__ == "__main__":
              print("🚀 Starting VOITHER Quick Start Setup...")
              
              success = create_quick_start_guide()
              report = generate_setup_report()
              
              if success:
                  print("\n🎉 VOITHER Quick Start Setup completed successfully!")
                  print("📖 Next: Read docs/QUICK_START.md to get started")
              else:
                  print("\n❌ Setup encountered issues")
          EOF
          
      - name: 📋 Upload Setup Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: setup-report
          path: setup_report.json
          
      - name: 💾 Commit Generated Files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (VOITHER Quick Start)"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add docs/QUICK_START.md || true
            git add docs/examples/ || true
            git add requirements-dev.txt || true
            git add .gitignore || true
            
            git commit -m "🚀 VOITHER Quick Start: Generated setup files and documentation
            
            Setup type: ${{ inputs.setup_type }}
            Include examples: ${{ inputs.include_examples }}
            
            Created:
            - docs/QUICK_START.md - Comprehensive quick start guide
            - Example documentation files (if requested)
            - Development environment setup (if requested)
            
            This commit provides new users with everything needed to get started with the VOITHER documentation ecosystem."
            
            echo "✅ Committed quick start setup files"
          else
            echo "ℹ️ No new files to commit"
          fi