---
name: üîç File Processing Matrix Verification Agent

on:
  push:
    branches: [main, develop]
    paths:
      - '**/*.md'
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
      - '**/*.json'
      - '**/*.yml'
      - '**/*.yaml'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  schedule:
    # Run every 6 hours to verify matrix compliance
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      verification_scope:
        description: 'Scope of verification to perform'
        required: true
        default: 'full_matrix'
        type: choice
        options:
        - full_matrix
        - workflow_compliance
        - documentation_sync
        - performance_metrics
      generate_report:
        description: 'Generate detailed compliance report'
        required: false
        default: true
        type: boolean

env:
  MATRIX_COMPLIANCE_VERSION: "1.0"
  VERIFICATION_ENABLED: true

jobs:
  verify-file-processing-matrix:
    name: üîç Verify File Processing Matrix Compliance
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: üîç Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üêç Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests python-frontmatter markdownify beautifulsoup4

      - name: üìä Verify File Processing Matrix Implementation
        id: matrix_verification
        run: |
          python3 - <<'EOF'
          import os
          import yaml
          import json
          from pathlib import Path
          from datetime import datetime

          print("üîç Starting File Processing Matrix Verification...")

          # Load workflows and documentation
          workflows_dir = Path('.github/workflows')
          workflows_docs_dir = Path('.workflows')

          verification_results = {
              "verification_timestamp": datetime.now().isoformat(),
              "matrix_compliance": {},
              "workflow_coverage": {},
              "missing_implementations": [],
              "performance_metrics": {},
              "recommendations": []
          }

          # Check file processing matrix compliance
          matrix_file = workflows_docs_dir / 'file-processing-matrix.md'
          if matrix_file.exists():
              print("‚úÖ File processing matrix documentation found")

              # Expected file types from matrix
              expected_file_types = ['.md', '.py', '.js', '.ts', '.json', '.yml', '.yaml']

              # Check each workflow for file type coverage
              for workflow_file in workflows_dir.glob('*.yml'):
                  with open(workflow_file, 'r') as f:
                      workflow_content = f.read()
                      workflow_data = yaml.safe_load(workflow_content)

                  workflow_name = workflow_file.stem
                  print(f"üìã Analyzing workflow: {workflow_name}")

                  # Check if workflow has file type triggers
                  file_triggers = []
                  if 'on' in workflow_data:
                      on_config = workflow_data['on']
                      if isinstance(on_config, dict):
                          if 'push' in on_config and 'paths' in on_config['push']:
                              file_triggers.extend(on_config['push']['paths'])
                          if 'pull_request' in on_config and 'paths' in on_config['pull_request']:
                              file_triggers.extend(on_config['pull_request']['paths'])

                  verification_results["workflow_coverage"][workflow_name] = {
                      "triggers": file_triggers,
                      "covers_matrix_files": any(ext in str(file_triggers) for ext in expected_file_types)
                  }

              # Calculate matrix compliance score
              workflows_with_file_processing = [
                  name for name, data in verification_results["workflow_coverage"].items()
                  if data["covers_matrix_files"]
              ]

              compliance_score = len(workflows_with_file_processing) / len(list(workflows_dir.glob('*.yml')))
              verification_results["matrix_compliance"] = {
                  "score": compliance_score,
                  "workflows_implementing_matrix": workflows_with_file_processing,
                  "total_workflows": len(list(workflows_dir.glob('*.yml')))
              }

              print(f"üìä Matrix compliance score: {compliance_score:.2%}")

          else:
              print("‚ùå File processing matrix documentation not found")
              verification_results["missing_implementations"].append("file-processing-matrix.md not found")

          # Check if all documented workflows are implemented
          documented_workflows = {
              "integrated-documentation-validation.yml": "Security & validation workflow",
              "auto-documentation-update.yml": "Automatic documentation updates",
              "ai-orchestration-setup.yml": "AI coordination and setup",
              "copilot-documentation-agent.yml": "Copilot-powered documentation agent",
              "file-processing-matrix-verification.yml": "Matrix compliance verification",
              "github-models-documentation-enhancer.yml": "GitHub Models AI enhancement"
          }

          for workflow_name, description in documented_workflows.items():
              workflow_path = workflows_dir / workflow_name
              if workflow_path.exists():
                  print(f"‚úÖ {description} - IMPLEMENTED")
              else:
                  print(f"‚ùå {description} - MISSING")
                  verification_results["missing_implementations"].append(f"{workflow_name}: {description}")

          # Check for verification mechanisms
          verification_workflows = [
              f for f in workflows_dir.glob('*verification*.yml')
              if f.name != 'file-processing-matrix-verification.yml'
          ]

          if not verification_workflows:
              verification_results["recommendations"].append(
                  "Consider adding automated verification workflows for continuous compliance monitoring"
              )

          # Performance metrics simulation (would need actual execution data)
          verification_results["performance_metrics"] = {
              "estimated_processing_times": {
                  ".md": "15-30s per file",
                  ".py": "5-10s per file",
                  ".js/.ts": "10-15s per file",
                  ".json": "1-2s per file",
                  ".yml/.yaml": "2-5s per file"
              },
              "optimization_status": "Parallel processing not fully implemented",
              "recommendation": "Implement async processing for better performance"
          }

          # Generate recommendations
          if verification_results["matrix_compliance"]["score"] < 0.8:
              verification_results["recommendations"].append(
                  f"Matrix compliance is {verification_results['matrix_compliance']['score']:.1%} - consider improving workflow coverage"
              )

          if len(verification_results["missing_implementations"]) > 0:
              verification_results["recommendations"].append(
                  "Implement missing workflows to achieve full compliance with documentation"
              )

          # Save verification report
          with open('matrix_verification_report.json', 'w') as f:
              json.dump(verification_results, f, indent=2)

          print("‚úÖ File Processing Matrix Verification completed!")
          print(f"üìä Compliance Score: {verification_results['matrix_compliance']['score']:.1%}")
          print(f"üîß Recommendations: {len(verification_results['recommendations'])}")

          # Output for GitHub Actions
          print(f"::set-output name=compliance_score::{verification_results['matrix_compliance']['score']:.2f}")
          print(f"::set-output name=missing_count::{len(verification_results['missing_implementations'])}")

          EOF

      - name: üìã Generate Compliance Report
        if: github.event.inputs.generate_report == 'true' || github.event.inputs.generate_report == null
        run: |
          python3 - <<'EOF'
          import json
          from datetime import datetime

          # Load verification results
          with open('matrix_verification_report.json', 'r') as f:
              results = json.load(f)

          # Generate markdown report
          report = f"""# üîç File Processing Matrix Compliance Report

          **Generated:** {results['verification_timestamp']}
          **Verification Scope:** ${{{{ github.event.inputs.verification_scope || 'full_matrix' }}}}

          ## üìä Compliance Summary

          - **Matrix Compliance Score:** {results['matrix_compliance']['score']:.1%}
          - **Workflows Implementing Matrix:** {results['matrix_compliance']['workflows_implementing_matrix']}
          - **Total Workflows:** {results['matrix_compliance']['total_workflows']}

          ## üîÑ Workflow Coverage Analysis

          """

          for workflow, data in results['workflow_coverage'].items():
              status = "‚úÖ COMPLIANT" if data['covers_matrix_files'] else "‚ùå NON-COMPLIANT"
              report += f"### {workflow} - {status}\n"
              report += f"- **File Triggers:** {', '.join(data['triggers']) if data['triggers'] else 'None'}\n"
              report += f"- **Covers Matrix Files:** {'Yes' if data['covers_matrix_files'] else 'No'}\n\n"

          if results['missing_implementations']:
              report += "## ‚ùå Missing Implementations\n\n"
              for missing in results['missing_implementations']:
                  report += f"- {missing}\n"
              report += "\n"

          if results['recommendations']:
              report += "## üí° Recommendations\n\n"
              for rec in results['recommendations']:
                  report += f"- {rec}\n"
              report += "\n"

          report += f"""## ‚ö° Performance Metrics

          **Estimated Processing Times:**
          """

          for file_type, time in results['performance_metrics']['estimated_processing_times'].items():
              report += f"- **{file_type}:** {time}\n"

          report += f"""
          **Optimization Status:** {results['performance_metrics']['optimization_status']}

          **Recommendation:** {results['performance_metrics']['recommendation']}

          ---

          *This report is automatically generated by the File Processing Matrix Verification Agent.*
          """

          # Save report
          with open('MATRIX_COMPLIANCE_REPORT.md', 'w') as f:
              f.write(report)

          print("üìã Compliance report generated: MATRIX_COMPLIANCE_REPORT.md")
          EOF

      - name: üö® Check Compliance Threshold
        id: compliance_check
        run: |
          COMPLIANCE_SCORE=$(python3 -c "
          import json
          with open('matrix_verification_report.json', 'r') as f:
              results = json.load(f)
          print(results['matrix_compliance']['score'])
          ")

          MISSING_COUNT=$(python3 -c "
          import json
          with open('matrix_verification_report.json', 'r') as f:
              results = json.load(f)
          print(len(results['missing_implementations']))
          ")

          echo "Compliance score: $COMPLIANCE_SCORE"
          echo "Missing implementations: $MISSING_COUNT"

          # Set thresholds
          MIN_COMPLIANCE=0.7
          MAX_MISSING=2

          if (( $(echo "$COMPLIANCE_SCORE < $MIN_COMPLIANCE" | bc -l) )); then
              echo "::warning::Matrix compliance below threshold ($COMPLIANCE_SCORE < $MIN_COMPLIANCE)"
              echo "compliance_status=warning" >> $GITHUB_OUTPUT
          elif [ "$MISSING_COUNT" -gt "$MAX_MISSING" ]; then
              echo "::warning::Too many missing implementations ($MISSING_COUNT > $MAX_MISSING)"
              echo "compliance_status=warning" >> $GITHUB_OUTPUT
          else
              echo "::notice::Matrix compliance acceptable ($COMPLIANCE_SCORE >= $MIN_COMPLIANCE)"
              echo "compliance_status=success" >> $GITHUB_OUTPUT
          fi

      - name: üì§ Upload Verification Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: matrix-verification-report-${{ github.run_number }}
          path: |
            matrix_verification_report.json
            MATRIX_COMPLIANCE_REPORT.md
          retention-days: 30

      - name: üí¨ Create Issue for Non-Compliance (if needed)
        if: steps.compliance_check.outputs.compliance_status == 'warning'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportContent = fs.readFileSync('MATRIX_COMPLIANCE_REPORT.md', 'utf8');

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® File Processing Matrix Compliance Warning',
              body: `## File Processing Matrix Compliance Issue Detected

              The automated verification agent has detected compliance issues with the file processing matrix implementation.

              **Action Required:** Review and address the issues identified in the compliance report.

              ## Verification Report

              ${reportContent}

              ---

              **Auto-generated by:** File Processing Matrix Verification Agent
              **Run ID:** ${{ github.run_number }}
              **Timestamp:** ${new Date().toISOString()}`,
              labels: ['automation', 'compliance', 'matrix-verification']
            });

            console.log(`Created issue #${issue.data.number}`);

      - name: ‚úÖ Verification Complete
        run: |
          echo "üéâ File Processing Matrix Verification completed successfully!"
          echo "üìä Compliance status: ${{ steps.compliance_check.outputs.compliance_status }}"
          echo "üìã Report available in artifacts"

          if [ "${{ steps.compliance_check.outputs.compliance_status }}" = "warning" ]; then
              echo "‚ö†Ô∏è Compliance issues detected - check the generated issue for details"
          else
              echo "‚úÖ All systems compliant with file processing matrix specifications"
          fi
